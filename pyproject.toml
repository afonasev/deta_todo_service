[tool.poetry]
name = "API"
version = "1.0.0"
description = "Deta Todo service"
authors = ["Evgeniy Afonasev <ea.afonasev@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = []

[tool.poetry.dependencies]
python = "^3.9"

aiodebug = "^2.3.0"  # todo
deta = {version = "1.2.0", extras = ["async"]}
# requests needed for TestClient
fastapi = {version = "^0.109.1", extras = ["requests"]}
fastapi-crudrouter = "^0.8.6"
loguru = "^0.6"
pydantic = {version = "^1.10.7", extras = ["ujson", "email"]}
sentry-sdk = "^1.40"
uvicorn = {version = "^0.27.0", extras = ["standard"]}

[tool.poetry.dev-dependencies]
autoflake = "^1.7"
black = "^22.10"
commitizen = "^2.42.1"
docformatter = "^1.5"
flake8-awesome = "^1.0"
flake8-black = "^0.3.6"
flake8-pylint = "^0.2.1"
ipython = "^8.15"
mypy = "^0.982"
perflint = "^0.7.2"
poethepoet = "^0.24.4"
pyproject-flake8 = "^0.0.1-alpha.4"
pytest = "^7.4"
pytest-asyncio = "^0.23.4"
pytest-cov = "^3.0"
pytest-deadfixtures = "^2.1"
pytest-mock = "^3.12"
pytest-randomly = "^3.10"
pyupgrade = "^2.37"
types-orjson = "^3.6.2"
unify = "^0.5"
wemake-python-styleguide = "^0.17"

[build-system]
requires = ["poetry>=1.0"]
build-backend = "poetry.masonry.api"

[tool.flake8]
# https://flake8.pycqa.org/en/latest/user/configuration.html
format = "wemake"

# https://github.com/csachs/pyproject-flake8/issues/4 about bool value as string
show-source = true
statistics = false
doctests = true

# Plugins:
max-annotations-complexity = 2
max-complexity = 6
max-expression-complexity = 4
enable-extensions = "G"

# darglint configuration:
# https://github.com/terrencepreilly/darglint
strictness = "long"
docstring-style = "numpy"

exclude = [
    ".git",
    ".venv"
]

# https://pypi.org/project/flake8-requirements/
known-modules = "app:[app],tests:[app,tests]"

# Ignores:
ignore = [
    "A003", # 'id' is a python builtin, consider renaming the class attribute
    "B008", # Do not perform function calls in argument defaults
    "C812", # missing trailing comma -> use autoformatters instead
    "D1", # Missing docstring
    "E501", # line too long -> use autoformatters instead
    "I900", #  'app' not listed as a requirement
    "PLE0401", # Unable to import 'app.adapters.orm.models' (import-error)
    "PLR0201", # Method could be a function (no-self-use)
    "PLW0511", # tod.o: ... (fixme)
    "WPS115", # Found upper-case constant in a class
    "WPS305", # Found `f` string
    "WPS306", # Found class without a base class
    "WPS404", # Found complex default value
    "WPS420", # Found wrong keyword: pass
    "WPS431", # Found nested class
    "WPS501", # Found `finally` in `try` block without `except`
    "WPS604", # Found incorrect node inside `class` body
]

# WPS442 - Found outer scope names shadowing
# WPS453 - Found executable mismatch: file is executable but no shebang is present
per-file-ignores = """
    tests/**: WPS442, WPS453
"""

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html
allow_redefinition = false
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_untyped_calls = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true

plugins = [
    "pydantic.mypy",
]

[tool.pydantic-mypy]
# https://pydantic-docs.helpmanual.io/mypy_plugin/
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pylint]
# https://pylint.pycqa.org/en/latest/

[tool.pylint.master]
persistent = "no"
load-plugins= [
    "perflint",  # https://github.com/tonybaloney/perflint
]
ignore = [

]

[tool.pylint.basic]
good-names = ["i","x","_","id"]
bad-names = []

[tool.pylint.elif]
max-nested-blocks = 2

[tool.pylint.format]
max-module-lines = 200

[tool.pylint.design]
max-args = 5
max-attributes = 10
max-bool-expr = 3
max-public-methods = 5
max-returns = 5
max-statements = 20

[tool.pylint.reports]
output-format = "colorized"
score = "no"

[tool.pylint."message control"]
disable= [
    "C0103", # Constant name "X" doesn't conform to UPPER_CASE naming style (invalid-name)
    "C0111", # Missing module docstring (missing-docstring)
    "E0110", # Abstract class 'X' with abstract methods instantiated (abstract-class-instantiated)
    "E0213", # Method should have "self" as first argument (no-self-argument) - N805 for flake8
    "E0611", # No name 'X' in module 'Y' (no-name-in-module)
    "E1101", # Class 'X' has no 'metadata' member (no-member) - use mypy instead
    "R0901", # Too many ancestors (m/n) (too-many-ancestors)
    "R0903", # Too few public methods (m/n) (too-few-public-methods)
    "W0621", # Redefining name 'X' from outer scope (line 22) (redefined-outer-name) - use flake8 instead
]

[tool.pylint.typecheck]
ignore-mixin-members= "yes"
ignored-classes = [
    "contextlib.closing",
]
contextmanager-decorators = [
    "contextlib.contextmanager",
]

[tool.pylint.similarities]
# Minimum lines number of a similarity.
min-similarity-lines = 4
# Ignore comments when computing similarities.
ignore-comments = "yes"
# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"
# Ignore imports when computing similarities.
ignore-imports = "no"

[tool.pytest.ini_options]
# http://doc.pytest.org/en/latest/customize.html
asyncio_mode = "auto"
addopts = [
  "--doctest-modules",
  "--log-level=DEBUG",
  "--showlocals",
  "--strict-markers",
  "--verbosity=2",
]

[tool.coverage.run]
# https://coverage.readthedocs.io/
branch = true
omit = [
    "tests/*",
    "**/__main__.py"
]

[tool.coverage.report]
# https://coverage.readthedocs.io/
fail_under = 100
show_missing = true
skip_covered = true

[tool.black]
# https://github.com/psf/black
include = '\.pyi?$'
line-length = 88
skip-string-normalization = true
target-version = ['py39']
verbose = true

[tool.isort]
# https://github.com/timothycrosley/isort/wiki/isort-Settings
profile = "black"

[tool.commitizen]
# https://commitizen-tools.github.io/commitizen/
annotated_tag = true
bump_message = "bump: $current_version â†’ $new_version"
tag_format = "v$major.$minor.$patch$prerelease"
update_changelog_on_bump = true
version = "1.0.0"
version_files = [
    "pyproject.toml",
]
